Código:

 {x ≥ 0}

 i := 0;
 y := 0;
 while i != x do
 (i := i+1;
 y := y+i)

 {y = (x ∗ (x + 1))/2}

1)

Testando algumas iterações do loop:

0: x = 4, i = 0, y = 0;
1: x = 4, i = 1, y = 1;
2: x = 4, i = 2, y = 3;
3: x = 4, i = 3, y = 6;
4: x = 4, i = 4, y = 10;

Em toda iteração, y = (i * (i + 1)) / 2 === 2 * y = i * (i + 1).

-------------------------------------------------------------------------

Validando o comando while com o invariante acima:

 {2 * y = i * (i + 1) && i != x}                                  === {2*y = i*(i + 1) && i != x}   === {2*y = i² + i && i != x} | H-implic
 {2 * (y + (i + 1)) = (i + 1) * ((i + 1) + 1)} |         |        === {2*y + 2*i + 2 = i² + 3*i + 2} === {2*y = i² + i}          |
 i := i + 1;                                   | H-atrib |                                                                       |
 {2 * (y + i) = i * (i + 1)} |                 |         | H-comp                                                                |
 y := y + i                  | H-atrib                   |                                                                       |
 {2 * y = i * (i + 1)}       |                           |                                                                       |

 Logo, como essa tripla de Hoare é válida, então todo o trecho de while é válida sob correção parcial.

--------------------------------------------------------------------------

 Assim, finalizando:

 {x ≥ 0}               === {x ≥ 0}                                                     | H-implic |
 {2 * 0 = 0 * (0 + 1)} === {0 = 0}                                 |         |         |          |
 i := 0;                                                           | H-atrib |         |          |
 {2 * 0 = i * (i + 1)}                                   |         |         | H-comp  |          |
 y := 0;                                                 | H-atrib           |         |          |
 {2 * y = i * (i + 1)}              |         |          |                   |         |          | H-comp
 while (i != x) do                  |         |                                                   |
 (i := i+1;                         | H-while |                                                   |
  y := y+i)                         |         |                                                   |
 {2 * y = i * (i + 1) && !(i != x)} |         | H-implic                                          |
 {y = (x ∗ (x + 1))/2}                        |                                                   |

2)

Para correção total, precisa-se determinar um variante e provar que ele completa a prova do loop.

Testando o variante {x - i}, e adicionando {x ≥ 0} no invariante, observa-se que:

 {2 * y = i * (i + 1) && x ≥ 0 &&  x - i ≥ 0 && x - i = u && i != x}                                 === {2y = i² + i && x ≥ 0 && x - i ≥ 0 && x - i = u && i != x} | H-implic
 {2 * (y + i + 1) = (i + 1) * (i + 2) && x ≥ 0 && x - i - 1 ≥ 0 && x - i - 1 < u} |         |        === {2y = i² + i && x ≥ 0 && x - i ≥ 1 && x - i < u + 1}       |
 i := i + 1;                                                                      | H-atrib |                                                                       |
 {2 * (y + i) = i * (i + 1) && x ≥ 0 && x - i ≥ 0 && x - i < u} |                 |         | H-comp                                                                |
 y := y + i                                                     | H-atrib                   |                                                                       |
 {2 * y = i * (i + 1) && x ≥ 0 && x - i ≥ 0 && x - i < u}       |                           |                                                                       |

Logo, como essa tripla de Hoare é válida, então todo o trecho de while é válida sob correção total.

--------------------------------------------------------------------------

O resto do código segue da seguinte forma:

 {x ≥ 0}                                 === {x ≥ 0}                                               | H-implic |
 {2*0 = 0*(0 + 1) && x ≥ 0 && x - 0 ≥ 0} === {x ≥ 0}                           |         |         |          |
 i := 0;                                                                       | H-atrib |         |          |
 {2*0 = i(i + 1) && x ≥ 0 && x - i ≥ 0}                              |         |         | H-comp  |          |
 y := 0;                                                             | H-atrib           |         |          |
 {2y = i(i + 1) && x ≥ 0 && x - i ≥ 0}          |         |          |                   |         |          | H-comp
 while (i != x) do                              |         |                                                   |
 (i := i+1;                                     | H-while |                                                   |
  y := y+i)                                     |         |                                                   |
 {2y = i(i + 1) && x ≥ 0 && x - i ≥ 0 && i = x} |         | H-implic                                          |
 {y = (x ∗ (x + 1))/2}                                    |                                                   |